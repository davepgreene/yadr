#!/usr/bin/env ruby

require_relative './brew_cask/caskroom'
require 'thor'

# Entrypoint for CLI
class BrewCaskCLI < Thor
  def initialize(args, opts, config)
    super
    @caskroom = Caskroom.new unless
      %w(help version).include?(config[:current_command].name)
  end

  desc 'outdated', 'list outdated casks'
  def outdated
    @caskroom.outdated(&outdated_output)
    @caskroom.deprecated(&deprecated_output)
  end

  desc 'upgrade CASK', 'Upgrade a specific cask. If a cask name is omitted,' \
  ' this task will update all outdated casks.'
  def upgrade(cask_name = nil)
    cask = @caskroom.get(cask_name) unless cask_name.nil?

    return say 'Invalid cask specified', :red if cask.nil? && !cask_name.nil?

    if cask_name.nil? # Upgrade everything
      @caskroom.casklist.select(&:outdated?).each(&:upgrade)
      invoke :cleanup
    else # Upgrade one cask
      cask.upgrade
      invoke :cleanup, cask_name
    end
  end

  desc 'cleanup CASK', 'clean up old versions of a specific cask. If a ' \
  'cask name is omitted, this task will cleanup all outdated casks.'
  def cleanup(cask_name = nil)
    cask = @caskroom.get(cask_name) unless cask_name.nil?

    return say 'Invalid cask specified', :red if cask.nil? && !cask_name.nil?

    unless cask_name.nil?
      clean_single_cask(cask)
      return
    end

    clean_all_casks if cask_name.nil? # Cleanup everything
  end

  no_tasks do
    def outdated_output
      proc do |casks|
        say 'There are no outdated casks', :yellow if casks.empty?
        next if casks.empty?

        puts "Outdated packages\n------------------"
        output = casks.unshift(['Package', 'Installed Version', 'New Version'])
        print_table(output)
        puts "\n"
      end
    end

    def deprecated_output
      proc do |casks|
        next if casks.empty?

        puts "Deprecated packages\n------------------"
        casks.each do |cask|
          puts cask.name
        end
        puts "\n"
      end
    end

    def clean_block
      proc do |c, versions|
        say "Cleaning up #{c.name}", :yellow
        dep_q = "#{c.name} has been deprecated. Ok to remove all versions?"
        if c.deprecated? && no?(dep_q, :red)
          say 'No action taken.', :red
          next
        end
        say "Removed #{versions.length} old version(s)", :yellow
      end
    end

    def clean_single_cask(cask)
      unless cask.can_cleanup?
        say "#{cask.name.capitalize} does not have any outdated versions. " \
          'No cleanup operations are necessary', :green
        return
      end

      cask.cleanup(&clean_block)
    end

    def clean_all_casks
      cleaned_casks = @caskroom.casklist.select(&:can_cleanup?)

      cleaned_casks.each do |c|
        c.cleanup(&clean_block)
      end

      say 'No cleanup operations are necessary', :green if cleaned_casks.empty?
    end
  end
end

BrewCaskCLI.start(ARGV)
